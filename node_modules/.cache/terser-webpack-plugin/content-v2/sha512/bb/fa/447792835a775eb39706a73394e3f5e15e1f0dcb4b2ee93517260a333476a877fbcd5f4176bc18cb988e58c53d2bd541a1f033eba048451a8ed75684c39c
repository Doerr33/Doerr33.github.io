{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{586:function(a,s,t){\"use strict\";t.r(s);var e=t(9),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"多任务\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#多任务\"}},[a._v(\"#\")]),a._v(\" 多任务\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-1-内容回顾\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-1-内容回顾\"}},[a._v(\"#\")]),a._v(\" 6.1. 内容回顾\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://raw.githubusercontent.com/Doerr33/images/master/img3/image-20210813135508891.png\",alt:\"image-20210813135508891\"}})]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-2-多任务的介绍\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-2-多任务的介绍\"}},[a._v(\"#\")]),a._v(\" 6.2. 多任务的介绍\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"多任务： 同一时间有多个任务在执行，这就是多任务\")]),a._v(\" \"),t(\"li\",[a._v(\"python程序默认是单任务\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-3-重点-线程-基本使用\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-3-重点-线程-基本使用\"}},[a._v(\"#\")]),a._v(\" 6.3. [重点]线程-基本使用\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"线程是CPU调度的基本单元\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"主线程：程序启动后有一个默认的主线，通常称为主线\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"作用：1）创建子线程   2）等其他子线程执行结束后，做关闭操作\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"子线程：程序的一个分支\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"子线程创建\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"导入模块   threading\")]),a._v(\" \"),t(\"li\",[a._v(\"创建线程对象 threading.Thread(target=执行的分支函数名)\")]),a._v(\" \"),t(\"li\",[a._v(\"启动子线程 线程对象.start()\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-4-重点-线程-线程名称、总数量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-4-重点-线程-线程名称、总数量\"}},[a._v(\"#\")]),a._v(\" 6.4. [重点]线程-线程名称、总数量\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"获取线程的数量：正在活跃的线程数量\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"threading.enumerate()  --- 当前活跃的线程对象列表\")]),a._v(\" \"),t(\"p\",[a._v(\"长度:  len（threading.enumerate()）\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"获取线程的名称\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"threading.current_thread()     获取当前的线程对象，对象中含有名称\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-5-重点-线程-参数及顺序\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-5-重点-线程-参数及顺序\"}},[a._v(\"#\")]),a._v(\" 6.5. [重点]线程-参数及顺序\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"线程参数\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"元组 args\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"threading.Tread(target=xxx, args=(参数1,参数2,....))\")]),a._v(\" \"),t(\"p\",[a._v(\"元组中元素的顺序和函数的参数顺序一致\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"字典 kwargs\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\n# 2、 使用字典传递  threading.Thread(target=xxx, kwargs={\"参数名\": 参数值,...})\\n    \\n')])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),t(\"br\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"混合元组和字典\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('# 3、 混合使用元组和字典 threading.Thread(target=xxx, args=(参数1,参数2,...), kwargs={\"参数名\": 参数值,...})\\n    thread_sing = threading.Thread(target=sing, args=(10, ), kwargs={\"c\": 1000, \"b\": 10})\\n')])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\")])])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"线程顺序: 线程的执行顺序是无序的（线程有CPU调度执行，CPU会根据系统运行状态按照自己的调度算法去调度执行）\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-6-重点-线程-守护线程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-6-重点-线程-守护线程\"}},[a._v(\"#\")]),a._v(\" 6.6. [重点]线程-守护线程\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"线程守护：子线程和主线的一种约定（当主线程结束后，子线程也结束）\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"子线程.setDaemon(True)\")])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-7-并行和并发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-7-并行和并发\"}},[a._v(\"#\")]),a._v(\" 6.7. 并行和并发\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"并发： 任务数 大于 CPU的核心数，这就是并发执行\")]),a._v(\" \"),t(\"li\",[a._v(\"并行： 任务数 小于 或 等于 CPU的核心数，这就是并行\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-8-重、难点-自定义线程类\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-8-重、难点-自定义线程类\"}},[a._v(\"#\")]),a._v(\" 6.8. [重、难点]自定义线程类\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"自定义线程类的步骤\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"导入模块\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"创建类并且继承 threading.Thread\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"class MyThread(threading.Thread):\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"重写父类的run方法\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"def run(self):\")]),a._v(\" \"),t(\"p\",[a._v(\"....\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"创建对象并且调用.start()\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"mythread  = MyThread()\")]),a._v(\" \"),t(\"p\",[a._v(\"mythread.start()\")])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"底层原理\")]),a._v(\" \"),t(\"p\",[a._v(\"Thread类\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"run方法\")]),a._v(\" \"),t(\"li\",[a._v(\"start()\")]),a._v(\" \"),t(\"li\",[a._v(\"start()中调用了run方法\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"自定义线程类的init方法问题\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"子类先通过super调用父类的初始化方法，子类再初始化\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"def __init__(self,num):\\n        # 先去调用父类的init方法\\n        super().__init__()\\n        self.num = num\\n\")])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),t(\"br\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-9-重点-多线程-共享全局变量\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-9-重点-多线程-共享全局变量\"}},[a._v(\"#\")]),a._v(\" 6.9. [重点]多线程-共享全局变量\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"多线程之间可以共享全局变量\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-10-难点-多线程-共享全局变量-问题\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-10-难点-多线程-共享全局变量-问题\"}},[a._v(\"#\")]),a._v(\" 6.10. [难点]多线程-共享全局变量-问题\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"存在的问题：多个线程同时访问同一个资源，出现资源竞争的问题\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"解决方法：优先让某个线程先执行\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"线程对象.join()\")])]),a._v(\" \"),t(\"p\",[a._v(\"缺点：把多线程变成了单线程，影响整体性能\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-11-同步\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-11-同步\"}},[a._v(\"#\")]),a._v(\" 6.11. 同步\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"同步：在多任务中 多个任务执行有先后顺序，一个执行完毕后，另外一个再执行\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"异步：在多任务中多个任务执行没有先后顺序，多个任务同时执行\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"线程的锁机制：当线程获取资源后，立刻进行锁定，资源使用完毕后再解锁，有效的保证同一时间只有\")]),a._v(\" \"),t(\"p\",[a._v(\"线程在使用资源\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-12-重点-互斥锁-重点\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-12-重点-互斥锁-重点\"}},[a._v(\"#\")]),a._v(\" 6.12. [重点]互斥锁(重点)\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"互斥锁使用分三步：\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"创建一把锁\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"lock1 = threading.Lock()\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"上锁\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"lock1.acquire()\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"解锁\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"lock1.release()\")])])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"互斥锁的使用原则：尽可能少的锁定竞争资源\")])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-13-死锁\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-13-死锁\"}},[a._v(\"#\")]),a._v(\" 6.13. 死锁\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"死锁：在多线程中，两个线程都占用一些资源 ，而且同一时间都在等待对方释放资源，这种状态就是死锁状态\")]),a._v(\" \"),t(\"li\",[a._v(\"避免：锁使用完毕后，要及时释放\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-14-案例-多任务版udp聊天器-一\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-14-案例-多任务版udp聊天器-一\"}},[a._v(\"#\")]),a._v(\" 6.14. 案例:多任务版udp聊天器(一)\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"创建一个子线程，单独用来接收信息\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"    # 创建子线程，单独接收用户发送的信息\\n    thread_recvmsg = threading.Thread(target=recv_msg, args=(udp_socket, ))\\n    # 启动子线程\\n    thread_recvmsg.start()\\n\")])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),t(\"br\")])])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"删除 接收信息的菜单和判断\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"可以接收多条信息\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('def recv_msg(udp_socket):\\n    \"\"\"接收信息的函数\"\"\"\\n\\n    while True:\\n        # 1) 使用socket接收数据\\n        # (b\\'\\\\xe4\\\\xbc\\\\x91\\\\xe6\\\\x81\\\\xaf\\\\xe4\\\\xbc\\\\x91\\\\xe6\\\\x81\\\\xaf\\\\xe6\\\\x89\\\\x80\\', (\\'192.168.150.93\\', 8080))\\n        recv_data, ip_port = udp_socket.recvfrom(1024)\\n        # 2）解码数据\\n        recv_text = recv_data.decode()\\n        # 3）输出显示\\n        print(\"接收到[%s]的消息：%s\" % (str(ip_port), recv_text))\\n')])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"11\")]),t(\"br\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-15-案例-多任务版udp聊天器-二\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-15-案例-多任务版udp聊天器-二\"}},[a._v(\"#\")]),a._v(\" 6.15. 案例:多任务版udp聊天器(二)\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"让子线程守护主线程\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[a._v(\"# 设置子线程守护主线程\\nthread_recvmsg.setDaemon(True)\\n\")])])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-16-重点-tcp服务端框架\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-16-重点-tcp服务端框架\"}},[a._v(\"#\")]),a._v(\" 6.16. [重点]TCP服务端框架\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[a._v(\"tcp的服务器\")]),a._v(\" \"),t(\"blockquote\",[t(\"p\",[a._v(\"1、导入模块\\n2、创建套接字\\n3、设置地址可以重用\\n4、绑定端口\\n5、设置监听，套接字有主动设置为被动\\n6、接受客户端连接\\n7、接收客户端发送的信息\\n8、解码数据并且进行输出\\n9、关闭和当前客户端的连接\")])])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"支持多线程，思想：每来一个新的客户端，我创建一个新的线程\")]),a._v(\" \"),t(\"blockquote\",[t(\"div\",{staticClass:\"language- line-numbers-mode\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v('\\nwhile True:\\n    # 6、接受客户端连接\\n    new_client_socket, ip_port = tcp_server_socket.accept()\\n    print(\"新用户上线:\",ip_port)\\n    # recv_msg(new_client_socket,ip_port)\\n\\n    # 创建线程\\n    thread_recvmsg = threading.Thread(target=recv_msg, args=(new_client_socket, ip_port))\\n    # 设置线程守护\\n    thread_recvmsg.setDaemon(True)\\n\\n    # 启动线程\\n    thread_recvmsg.start()\\n')])]),a._v(\" \"),t(\"div\",{staticClass:\"line-numbers-wrapper\"},[t(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"11\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"12\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"13\")]),t(\"br\"),t(\"span\",{staticClass:\"line-number\"},[a._v(\"14\")]),t(\"br\")])])])])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"_6-17-知识点总结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-17-知识点总结\"}},[a._v(\"#\")]),a._v(\" 6.17. 知识点总结\")])])}),[],!1,null,null,null);s.default=r.exports}}]);","extractedComments":[]}